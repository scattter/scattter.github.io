let e=null;const c={mounted(t,o){t.__tip=o.value;const l=()=>{e&&(e=null);const{width:s,left:n,top:r}=t.getBoundingClientRect();e=document.createElement("div"),e.innerHTML=t.__tip,e.classList.add("v-tooltip"),e.style.width=`${s}px`,e.style.left=`${n}px`,r-t.scrollHeight-20<0?e.style.top=r+40+"px":e.style.top=r-t.scrollHeight-20+"px",document.documentElement.classList.contains("dark")?(e.style.backgroundColor="#9ea0a5",e.style.color="#242424"):e.style.backgroundColor="#fff",document.body.appendChild(e)};(t.scrollWidth>t.offsetWidth||o.modifiers.show||t.scrollHeight>t.offsetHeight||o.modifiers.force)&&(t.addEventListener("mouseenter",()=>{t.style.cursor="pointer",l();const s=()=>{e&&e.remove()},n=i(t);n&&n.addEventListener("scroll",s)}),t.addEventListener("mouseleave",()=>{e&&e.remove()}))},updated(t,o){t.__tip=o.value},beforeUnmount(){e&&e.remove()}},i=t=>{if(!t||!t.parentElement)return null;const o=t.parentElement,l=window.getComputedStyle(o,null).overflow;if(o.scrollWidth>o.clientHeight&&(l==="auto"||l==="scroll"))return o;i(o)};export{c as t};
